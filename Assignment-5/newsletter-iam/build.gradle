plugins {
    id 'java'
    id 'pmd'
    id 'checkstyle'
    id 'org.springframework.boot' version '2.6.3'
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'


group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-devtools:2.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.3'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.0'
    implementation 'org.springframework.security:spring-security-web:5.6.1'
    implementation 'org.springframework.security:spring-security-core:5.6.1'
    implementation 'org.springframework.security:spring-security-config:5.6.1'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:2.6.3'
    implementation 'org.springframework.hateoas:spring-hateoas:1.4.1'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.6.3'

    implementation 'mysql:mysql-connector-java:8.0.25'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'javax.activation:activation:1.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.1'

    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'junit:junit:4.13.1'
    implementation 'junit:junit:4.13.1'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    annotationProcessor "org.projectlombok:lombok:1.18.22"

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.3'
}

test {
    useJUnitPlatform()
}

pmd {
    consoleOutput = true
    toolVersion = "6.21.0"
    ruleSets = ["config/pmd/ruleset.xml"]
}

tasks.withType(Checkstyle) {
    showViolations true
}

checkstyle {
    toolVersion '8.11'
}

checkstyleMain {
    source ='src/main/java'
}

tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}


jar {
    enabled = true
    manifest {
        attributes 'Main-Class': 'com.nuclei.iam.Application'
    }
}
